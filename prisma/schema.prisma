// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userSettings   UserSettings?
  fantasyLeagues FantasyLeague[]
}

model UserSettings {
  id    String @id @default(cuid())
  theme Theme  @default(SYSTEM)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model FantasyLeague {
  id           String    @id @default(cuid())
  leagueName   String
  teamName     String
  teamCount    Int
  draftDate    DateTime?
  platform     Platform
  buyIn        Int
  pickPosition Int?
  playoffTeams Int?
  initialRank  Int?
  currentRank  Int?
  payout1      Int?
  payout2      Int?
  payout3      Int?

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  weeklyStats WeeklyStats[]

  @@unique([userId, leagueName])
}

model WeeklyStats {
  id              String   @default(cuid())
  week            Int
  projectedWin    Int?
  win             Boolean?
  projectedPoints Int?
  points          Int?
  place           Int?

  FantasyLeague   FantasyLeague? @relation(fields: [fantasyLeagueId], references: [id], onDelete: Cascade)
  fantasyLeagueId String?

  @@id([id, week])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Theme {
  SYSTEM
  LIGHT
  DARK
}

enum Platform {
  espn
  free
  sleeper
  yahoo
}
